package graph.unionfind;

import data.UnionFind;

import java.util.HashMap;
import java.util.Map;

public class Problem924_MinimizeMalwareSpread {

    public int minMalwareSpread(int[][] G, int[] M) {

        int n = G.length;
        UnionFind uf = new UnionFind(n);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (G[i][j] == 1) uf.union(i, j);
            }
        }

        Map<Integer, Integer> map = new HashMap<>();
        for (int m : M) {
            int pm = uf.find(m);
            if (map.containsKey(pm)) map.put(pm, 0);
            else map.put(pm, uf.size(pm));
        }

        int res = 0, maxSaves = -1;
        for (int m : M) {
            int pm = uf.find(m);
            int saves = map.get(pm);
            if (saves > maxSaves) {
                res = m;
                maxSaves = saves;
            }
            else if (saves == maxSaves) {
                if (res > m) res = m;
            }
        }

        return res;
    }
}
